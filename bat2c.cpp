#include <windows.h>
#include <fstream>
#include <string>
#include "argparse.hpp"

std::vector<std::string> split(const std::string& s, char seperator) {
	std::vector<std::string> output;
	std::string::size_type prev_pos = 0, pos = 0;
	while ((pos = s.find(seperator, pos)) != std::string::npos) {
		std::string substring(s.substr(prev_pos, pos - prev_pos));
		output.push_back(substring);
		prev_pos = ++pos;
	}
	output.push_back(s.substr(prev_pos, pos - prev_pos));
	return output;
}

std::string lower_s(std::string s) {
	std::string ns;
	for (auto it = s.begin(); it != s.end(); ++it) {
		ns.push_back(std::tolower(*it));
	}
	return ns;
}

int main(int argc, char* argv[]) {
	argparse::ArgumentParser program("Bat2C");
	program.add_argument("path")
		.help("The path to your .bat file from the current directory.")
		.required()
		.nargs(1);/*
	program.add_argument("-o")
		.default_value("%CD%")
		.nargs(2)
		.help("Path to the output file. If not specified, set to out.c by default.");*/
	try {
		program.parse_args(argc, argv);
	}
	catch (const std::runtime_error& err) {
		std::cerr << err.what() << std::endl;
		std::cerr << program;
		std::exit(1);
	}

	std::string path = program.get("path");
	std::ifstream batfile;
	try {
		batfile = std::ifstream(path, std::ios_base::in);
	} catch (const std::ifstream::failure& e) {
		std::cerr << "Could not open a file: " << e.what() << std::endl;
		std::cerr << program;
		std::exit(1);
	}
	std::stringstream _tmp;
	_tmp << batfile.rdbuf();
	std::vector<std::string> batcode = split(_tmp.str(), '\n');

	std::string cp = std::string(); // C Program
	cp.append("// AUTO-GENERATED by Bat2C program\n// that was written by blek\n// \n// compile like this(minimum size, but may be hard):\n// cl out.c\n// crinkler [object.obj] user32.lib kernel32.lib\n// \n// or this(bigger size(still pretty small tho), but WAY easier):\n// tcc out.c \n\n#include <stdlib.h>\n\nint main() {\n");
	std::string _tmp2;

	for (int i = 0; i < batcode.size(); i++) {
		_tmp.str(std::string());
		if (lower_s(batcode[i]).starts_with("rem") || lower_s(batcode[i]).starts_with("#")) {
			batcode[i].erase(0, 4);
			_tmp << "    // " << batcode[i] << "\n";
		} else {
			_tmp << "    system(\"" << batcode[i] << "\");\n";
		}
		cp.append(_tmp.str());
	}
	cp.append("}\n\n");
	std::ofstream outc("out.c");
	outc << cp;
	outc.close();

	return 0;
} // main